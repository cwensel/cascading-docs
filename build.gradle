/*
 *  Copyright (c) 2007-2017 Xplenty, Inc. All Rights Reserved.
 *
 *  Project and contact information: http://www.cascading.org/
 *
 *  This file is part of the Cascading project.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {url 'http://repo.springsource.org/plugins-release'}
    maven {url 'http://conjars.org/repo/'}
  }

  dependencies {
    classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.4'
    classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
    classpath 'concurrentinc:documentation-plugin:1.4.1-2'
  }
}

ext.majorVersion = '3.2'

apply from: 'etc/properties.gradle'
apply from: 'etc/s3Upload.gradle'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'
apply plugin: 'documentation-plugin'

repositories {
  mavenLocal()
  mavenCentral()
  maven {url 'http://conjars.org/repo/'}
}

ext.cascadingVersion = '3.1.+'
ext.cascadingChanging = false
//ext.hadoopVersion = '1.2.1'
ext.hadoop2Version = '2.7.2'
//ext.tezVersion = '0.5.1'
ext.buildDate = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )
ext.buildTimestamp = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" ).format( new Date() )

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations.all {
  resolutionStrategy {
    force 'com.google.guava:guava:11.0.2'
  }
}

dependencies {

  compile group: 'cascading', name: 'cascading-local', version: cascadingVersion, changing: cascadingChanging
  compile group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion, changing: cascadingChanging

  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.6.1'
  compile group: 'log4j', name: 'log4j', version: '1.2.16'

  compile group: 'cascading', name: 'cascading-core', version: cascadingVersion, classifier: 'tests', changing: cascadingChanging
//  compile group: 'cascading', name: 'cascading-local', version: cascadingVersion, classifier: 'tests', changing: cascadingChanging
  compile group: 'cascading', name: 'cascading-platform', version: cascadingVersion, classifier: 'tests', changing: cascadingChanging

  compile group: 'cascading', name: 'fluid-api', version: '1.0.0', changing: cascadingChanging
  compile group: 'cascading', name: 'fluid-cascading30', version: '1.0.0', changing: cascadingChanging

  compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoop2Version
  compile group: 'org.apache.hadoop', name: 'hadoop-client', version: hadoop2Version
  compile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoop2Version

  testCompile group: 'junit', name: 'junit', version: "4.11"
}

test {
  include '**/*Test.class'
}

task extract( type: ExtractTask ) {
  inputDir file( 'src/test/java/examples/userguide' )
  outputDir file( "${buildDir}/extract" )
}

task copyGuide( type: Copy, dependsOn: extract ) {
  from 'src/asciidoc/userguide/'
  from "${buildDir}/extract/userguide/"
  into "${buildDir}/asciidoc"
}

createTopTOC {

  dependsOn << copyGuide

  inputFiles = fileTree( dir: "${buildDir}/asciidoc", include: ['**/ch?-*.adoc', '**/ch??-*.adoc'] )
  outputFile = file( "${buildDir}/asciidoc/_toc.adoc" )

  title = '{_doctitle}' // prevents chapter name from being included
}

task createTopTopTOC( type: com.concurrentinc.CreateTopTOCTask ) {

  dependsOn << copyGuide

  inputFiles = fileTree( dir: "${buildDir}/asciidoc", include: ['**/ch?-*.adoc', '**/ch??-*.adoc'] )
  outputFile = file( "${buildDir}/asciidoc/_top-toc.adoc" )

  headerFormat = "" // hides redundant book name
}

createDocs {

  dependsOn << copyGuide
  dependsOn << createTopTOC
  dependsOn << createTopTopTOC
  dependsOn << extract

  sourceDir = file( "${buildDir}/asciidoc" )
  outputDir = file( "${buildDir}/userguide" )
  targetStyle = "cascading"

  imagesDir = file( "src/site/" )

  attributes = [
    _doctitle          : "Cascading ${majorVersion} User Guide",
    revnumber          : "${majorVersion}-${buildDate}",
    artifactsurl       : project.s3Bucket,
    docsurl            : project.s3BucketDocs,
    'highlightjs-theme': 'github',
    sectlinks          : 'true',
    sectanchors        : 'true',
    toc2               : null,
    icons              : 'font', // enabled code callouts

    analyticsid        : System.properties[ 'analytics.id' ],
    analyticsdomain    : System.properties[ 'analytics.domain' ]

    // disabled till attributes in docinfo are supported
    //  docinfo1: ''
  ]

  options = [
    doctype: "book"
  ]
}

task zipDocs( type: Zip, dependsOn: createDocs ) {
  description = "zip documentation"
  baseName = "userguide"
  from( "${createDocs.outputDir}/html5" ) {
    include '*.*'
  }
  into "userguide"
}

task docDist( type: Copy, dependsOn: [test, createDocs, zipDocs] ) {
  description = "publish documentation"

  s3UploadDocs.dependsOn << docDist

  from "${createDocs.outputDir}/html5"
  from zipDocs.archivePath
  into "${s3UploadDocs.source}/userguide/"
}
